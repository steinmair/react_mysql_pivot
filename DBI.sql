use school;


SELECT SCHOOLCLASS.DEPARTMENT_ID, DEPARTMENT.NAME_SHORT NAME_DEP,
       STUDENT.SCHOOLCLASS_ID, SCHOOLCLASS.NAME NAME_SC,
       (CASE WHEN STUDENT.SEX IS NOT NULL THEN SEX
        WHEN STUDENT.SEX IS NULL AND STUDENT.SCHOOLCLASS_ID IS NOT NULL THEN 'Anzahl Schulklasse'
         ELSE '' END ) SEX,
    -- (CASE WHEN SCHOOLCLASS.NAME IS NOT NULL THEN NAME
      --    WHEN SCHOOLCLASS.NAME IS NULL AND SCHOOLCLASS.SCHOOLCLASS_ID IS NULL THEN 'Anzahl Abteilung'
        -- ELSE '' END ) NAME_SC,
       -- IFNULL(STUDENT.SEX,'Anzahl Schulklasse') SEX,
       COUNT(*) CNT,
       GROUPING(SCHOOLCLASS.DEPARTMENT_ID,DEPARTMENT.NAME_SHORT,
         STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME,STUDENT.SEX) GROUPING_ID
FROM STUDENT,
     SCHOOLCLASS,
     DEPARTMENT
WHERE STUDENT.SCHOOLCLASS_ID = SCHOOLCLASS.SCHOOLCLASS_ID
AND SCHOOLCLASS.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
GROUP BY SCHOOLCLASS.DEPARTMENT_ID,DEPARTMENT.NAME_SHORT,
         STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME,STUDENT.SEX WITH ROLLUP
HAVING GROUPING_ID NOT IN (3,15,31);
-- ORDER BY SCHOOLCLASS.DEPARTMENT_ID,STUDENT.SCHOOLCLASS_ID,STUDENT.SEX;

SELECT SCHOOLCLASS.DEPARTMENT_ID,
    STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME NAME_SC,
    COUNT(*) CNT,
    DENSE_RANK() OVER (PARTITION BY DEPARTMENT_ID ORDER BY COUNT(*)) RANKING1
FROM STUDENT,
     SCHOOLCLASS
WHERE STUDENT.SCHOOLCLASS_ID = SCHOOLCLASS.SCHOOLCLASS_ID
GROUP BY SCHOOLCLASS.DEPARTMENT_ID,STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME
ORDER BY SCHOOLCLASS.DEPARTMENT_ID,SCHOOLCLASS.NAME;


SELECT SCHOOLCLASS.DEPARTMENT_ID,
    STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME NAME_SC,
    COUNT(*) CNT,
    AVG(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) AVG
FROM STUDENT,
     SCHOOLCLASS
WHERE STUDENT.SCHOOLCLASS_ID = SCHOOLCLASS.SCHOOLCLASS_ID
GROUP BY SCHOOLCLASS.DEPARTMENT_ID,STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME
ORDER BY SCHOOLCLASS.DEPARTMENT_ID,SCHOOLCLASS.NAME;

SELECT SCHOOLCLASS.DEPARTMENT_ID,
    STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME NAME_SC,
    COUNT(*) CNT,
    SUM(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) SUM
FROM STUDENT,
     SCHOOLCLASS
WHERE STUDENT.SCHOOLCLASS_ID = SCHOOLCLASS.SCHOOLCLASS_ID
GROUP BY SCHOOLCLASS.DEPARTMENT_ID,STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME
ORDER BY SCHOOLCLASS.DEPARTMENT_ID,SCHOOLCLASS.NAME;

SELECT SCHOOLCLASS.DEPARTMENT_ID,
    STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME NAME_SC,
    COUNT(*) CNT,
    MIN(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) MIN,
    MAX(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) MAX
FROM STUDENT,
     SCHOOLCLASS
WHERE STUDENT.SCHOOLCLASS_ID = SCHOOLCLASS.SCHOOLCLASS_ID
GROUP BY SCHOOLCLASS.DEPARTMENT_ID,STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME
ORDER BY SCHOOLCLASS.DEPARTMENT_ID,SCHOOLCLASS.NAME;

SELECT SCHOOLCLASS.DEPARTMENT_ID,
    STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME NAME_SC,
    COUNT(*) CNT,
    SUM(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) SUM,
    100 * COUNT(*) / (SUM(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID)) PERCENT1, -- pro department
    100 * COUNT(*) / (SUM(COUNT(*)) OVER ()) PERCENT2, -- gesamtanzahl OVER leer
    MIN(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) MIN,
    MAX(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) MAX
FROM STUDENT,
     SCHOOLCLASS
WHERE STUDENT.SCHOOLCLASS_ID = SCHOOLCLASS.SCHOOLCLASS_ID
GROUP BY SCHOOLCLASS.DEPARTMENT_ID,STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME
ORDER BY SCHOOLCLASS.DEPARTMENT_ID,SCHOOLCLASS.NAME;

SELECT SCHOOLCLASS.DEPARTMENT_ID,
    STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME NAME_SC,
    COUNT(*) CNT,
    LEAD(COUNT(*)) over (PARTITION BY DEPARTMENT_ID ORDER BY COUNT(*)) LEAD1,
    (LEAD(COUNT(*)) over (PARTITION BY DEPARTMENT_ID ORDER BY COUNT(*)) / COUNT(*)-1) * 100 PERCENT3,
    LAG(COUNT(*)) over (PARTITION BY DEPARTMENT_ID ORDER BY COUNT(*)) LAG1,
    RANK() over (PARTITION BY DEPARTMENT_ID ORDER BY COUNT(*)) Ranking1,
    SUM(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) SUM,
    100 * COUNT(*) / (SUM(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID)) PERCENT1, -- pro department
    100 * COUNT(*) / (SUM(COUNT(*)) OVER ()) PERCENT2, -- gesamtanzahl OVER leer
    MIN(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) MIN,
    MAX(COUNT(*)) OVER (PARTITION BY DEPARTMENT_ID) MAX
FROM STUDENT,
     SCHOOLCLASS
WHERE STUDENT.SCHOOLCLASS_ID = SCHOOLCLASS.SCHOOLCLASS_ID
GROUP BY SCHOOLCLASS.DEPARTMENT_ID,STUDENT.SCHOOLCLASS_ID,SCHOOLCLASS.NAME
ORDER BY SCHOOLCLASS.DEPARTMENT_ID,COUNT(*); -- SCHOOLCLASS.NAME;


select SCHOOLCLASS.NAME, TEACHER.SURNAME
from SCHOOLCLASS, TEACHER, DEPARTMENT
where DEPARTMENT.TEACHER_ID = TEACHER.TEACHER_ID
order by DEPARTMENT.DEPARTMENT_ID;


-- Indexe: Wenn die Tabellen SCHOOLCLASS, TEACHER und DEPARTMENT entsprechende Indexe auf den Spalten haben, die in den Join-Bedingungen und in der ORDER BY-Klausel verwendet werden, können diese Indexe effizient genutzt werden, um den Datenzugriff zu beschleunigen. Zum Beispiel könnten Indexe auf DEPARTMENT.TEACHER_ID, TEACHER.TEACHER_ID und DEPARTMENT.DEPARTMENT_ID hilfreich sein.

-- Ausführungsplan: Ein Ausführungsplan zeigt den Optimierer des Datenbanksystems an, wie die Abfrage ausgeführt werden soll. Je nach Datenverteilung, Größe der Tabellen und vorhandenen Indexen kann der Ausführungsplan variieren. Ein typischer Ausführungsplan für diese Abfrage könnte sein:

-- Einlesen der benötigten Daten aus den Tabellen DEPARTMENT und TEACHER unter Verwendung von Indexzugriffen auf DEPARTMENT.TEACHER_ID und TEACHER.TEACHER_ID.
-- Ausführung des Joins zwischen DEPARTMENT und TEACHER basierend auf den Join-Bedingungen.
-- Zusammenführen der Daten aus SCHOOLCLASS mit den bereits verbundenen Daten.
-- Sortieren der Ergebnisse nach DEPARTMENT.DEPARTMENT_ID gemäß der ORDER BY-Klausel.

use school;

select DEPARTMENT.DEPARTMENT_ID, DEPARTMENT.NAME AS DEP_NAME, TITLE,SURNAME,FIRSTNAME
from DEPARTMENT,TEACHER
where TEACHER.TEACHER_ID = DEPARTMENT.TEACHER_ID order by DEPARTMENT.NAME, SURNAME;

select SCHOOLCLASS.NAME AS SC_NAME, TITLE,SURNAME,FIRSTNAME
from SCHOOLCLASS, TEACHER
where SCHOOLCLASS.TEACHER_ID = TEACHER.TEACHER_ID
order by NAME;

select NAME as SC_NAME,SURNAME,FIRSTNAME
from SCHOOLCLASS
    join school.STUDENT S on SCHOOLCLASS.SCHOOLCLASS_ID = S.SCHOOLCLASS_ID
where NAME = '3AHBG' or NAME = '3BHBG'
order by SURNAME,FIRSTNAME;

select DEPARTMENT.NAME as DEP_NAME,S.NAME as SC_NAME, TITLE,SURNAME,FIRSTNAME
from DEPARTMENT
join SCHOOLCLASS S on DEPARTMENT.DEPARTMENT_ID = S.DEPARTMENT_ID
join TEACHER T on T.TEACHER_ID = S.TEACHER_ID
order by DEPARTMENT.NAME,S.NAME;

select T.SURNAME as TE_SURNAME,S2.SURNAME as ST_SURNAME, S2.FIRSTNAME as ST_FIRSTNAME
from DEPARTMENT
join school.TEACHER T on DEPARTMENT.TEACHER_ID = T.TEACHER_ID
join school.SCHOOLCLASS S on DEPARTMENT.DEPARTMENT_ID = S.DEPARTMENT_ID
join school.STUDENT S2 on S.SCHOOLCLASS_ID = S2.SCHOOLCLASS_ID
where S2.FIRSTNAME like '%mer%' or S2.SURNAME like '%mer%'
order by T.SURNAME,S2.SURNAME,S2.FIRSTNAME;

SELECT DISTINCT S.STUDENT_ID, S.SURNAME, S.FIRSTNAME
FROM STUDENT S
         JOIN ABSENCE A ON S.STUDENT_ID = A.STUDENT_ID
         JOIN STUDENT_SUBJECT SS ON S.STUDENT_ID = SS.STUDENT_ID
         JOIN SUBJECT SUB ON SUB.SUBJECT_ID = SS.SUBJECT_ID
WHERE SUB.NAME_SHORT IN ('MGIN', 'BMSV')
  AND SS.GRADE = 1
  AND S.STUDENT_ID IN (
    SELECT DISTINCT STUDENT_ID
    FROM ABSENCE
    WHERE REASON = 'Schwänzen'
)
ORDER BY S.SURNAME, S.FIRSTNAME;

select distinct S.STUDENT_ID, S.SURNAME, S.FIRSTNAME
FROM SCHOOLCLASS
    JOIN STUDENT S ON SCHOOLCLASS.SCHOOLCLASS_ID = S.SCHOOLCLASS_ID
    JOIN ABSENCE A ON S.STUDENT_ID = A.STUDENT_ID
    JOIN STUDENT_SUBJECT SS ON S.STUDENT_ID = SS.STUDENT_ID
    JOIN SUBJECT SUB ON SUB.SUBJECT_ID = SS.SUBJECT_ID


where SCHOOLCLASS.LEVEL = 11
  AND SS.SUBJECT_ID <= 3
  AND GRADE = 1
  AND S.STUDENT_ID NOT IN (
    SELECT STUDENT_ID
    FROM ABSENCE
    WHERE REASON = 'Scheinkrank'
)
ORDER BY S.SURNAME, S.FIRSTNAME;

select DEPARTMENT.DEPARTMENT_ID , DEPARTMENT.NAME, COUNT(*) as CNT
from DEPARTMENT,SCHOOLCLASS
WHERE DEPARTMENT.DEPARTMENT_ID = SCHOOLCLASS.DEPARTMENT_ID
GROUP BY DEPARTMENT.DEPARTMENT_ID
ORDER BY DEPARTMENT_ID;

select DEPARTMENT.DEPARTMENT_ID , DEPARTMENT.NAME, COUNT(*) as CNT
from DEPARTMENT,STUDENT,SCHOOLCLASS
WHERE DEPARTMENT.DEPARTMENT_ID = SCHOOLCLASS.DEPARTMENT_ID
AND SCHOOLCLASS.SCHOOLCLASS_ID = STUDENT.SCHOOLCLASS_ID
GROUP BY DEPARTMENT.NAME
ORDER BY DEPARTMENT.NAME;

select SCHOOLCLASS.NAME,STUDENT.SURNAME,STUDENT.FIRSTNAME, AVG(GRADE) as AVG_GRADE
from STUDENT
JOIN SCHOOLCLASS on SCHOOLCLASS.SCHOOLCLASS_ID = STUDENT.SCHOOLCLASS_ID
join STUDENT_SUBJECT on STUDENT.STUDENT_ID = STUDENT_SUBJECT.STUDENT_ID
WHERE SCHOOLCLASS.NAME = '3AHBG'
GROUP BY STUDENT.STUDENT_ID,STUDENT.SURNAME, SCHOOLCLASS.NAME, STUDENT.FIRSTNAME
ORDER BY STUDENT.SURNAME, STUDENT.FIRSTNAME;

select DEPARTMENT.DEPARTMENT_ID, DEPARTMENT.NAME, AVG(SS.GRADE) as AVG
from DEPARTMENT
join school.SCHOOLCLASS S on DEPARTMENT.DEPARTMENT_ID = S.DEPARTMENT_ID
join school.STUDENT S2 on S.SCHOOLCLASS_ID = S2.SCHOOLCLASS_ID
join school.STUDENT_SUBJECT SS on S2.STUDENT_ID = SS.STUDENT_ID
where SUBJECT_ID = 3
GROUP BY DEPARTMENT.DEPARTMENT_ID
ORDER BY AVG;

SELECT
    STUDENT.STUDENT_ID,
        STUDENT.SURNAME,
       STUDENT.FIRSTNAME,
      SUM(DATEDIFF(TIME_TO,TIME_FROM)) AS SUM
FROM STUDENT
         JOIN ABSENCE ON STUDENT.STUDENT_ID = ABSENCE.STUDENT_ID
GROUP BY STUDENT.STUDENT_ID, STUDENT.SURNAME, STUDENT.FIRSTNAME
ORDER BY SUM DESC, STUDENT.STUDENT_ID ASC
LIMIT 10;
